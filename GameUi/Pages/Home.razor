@page "/"
@using GameDll.Services
@using GameUi.Models
@inject HttpClient HttpClient
@inject NavigationManager Navigation

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

<PageTitle>Home</PageTitle>

<div class="container my-5">
    <h1 class="display-4 text-center text-primary mb-4">List Of All Games</h1>

    <!-- Search Bar -->
    <div class="mb-4">
        <input type="text" class="form-control form-control-lg" placeholder="Search by Game Name" @bind="SearchTerm" @bind:event="oninput" />
    </div>

    <!-- Add New Game Button Centered -->
    <div class="mb-4 text-center">
        <button class="btn btn-success btn-lg" @onclick="NavigateToAddNewGame">
            <i class="bi bi-plus-lg me-1"></i>Add New Game
        </button>
    </div>

    <!-- Game List Table -->
    <table class="table table-hover table-bordered">
        <thead class="table-dark">
            <tr>
                <th>Game ID</th>
                <th>Game Name</th>
                <th>Price</th>
                <th>Options</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in FilteredGames)
            {
                <tr>
                    <td>@item.GameId</td>
                    <td>@item.GameName</td>
                    <td>@item.Price.ToString("C", new System.Globalization.CultureInfo("en-IN"))</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => NavigateToEdit(item.GameId)">Update</button>
                        <button class="btn btn-danger" @onclick="() => DeleteGame(item.GameId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    public List<Game> Games { get; set; } = new List<Game>();
    public string SearchTerm { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetAllGames();
    }

    public async Task GetAllGames()
    {
        Games = await HttpClient.GetFromJsonAsync<List<Game>>("http://localhost:5072/api/Game");
    }

    public async Task DeleteGame(int gameId)
    {
        var response = await HttpClient.DeleteAsync($"http://localhost:5072/api/Game/{gameId}");

        if (response.IsSuccessStatusCode)
        {
            Games.RemoveAll(g => g.GameId == gameId);
        }
        else
        {
            Console.WriteLine("Error deleting game.");
        }
    }

    public void NavigateToEdit(int gameId)
    {
        // Navigate to the Edit page with the gameId
        Navigation.NavigateTo($"/edit/{gameId}");
    }

    public void NavigateToAddNewGame()
    {
        // Navigate to the Add New Game page
        Navigation.NavigateTo("/addgame");
    }

    public List<Game> FilteredGames => Games
        .Where(g => string.IsNullOrWhiteSpace(SearchTerm) || g.GameName.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase))
        .ToList();
}
